#!/usr/bin/env bash
#
# Zephir Parser
#
# Copyright (c) 2013-2017 Zephir Team and contributors
#
# This source file is subject the MIT license, that is bundled with
# this package in the file LICENSE, and is available through the
# world-wide-web at the following url:
# http://zephir-lang.com/license.html
#
# If you did not receive a copy of the MIT license and are unable
# to obtain it through the world-wide-web, please send a note to
# license@zephir-lang.com so we can mail you a copy immediately.

#  Available params:
#  --arch
#  --phpize
#  --php-config
#
#  Example:
#  ./install --phpize /usr/bin/phpize5.6 --php-config /usr/bin/php-config5.6

CURRENT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

GCC_BIN=$(command -v gcc 2>/dev/null)
RE2C_BIN=${RE2C_BIN:-$(command -v re2c 2>/dev/null)}

if [ x"$RE2C_BIN" = x ]; then
  echo -e "error: unable to locate the re2c"
  exit 2
fi

if [ x"$GCC_BIN" = x ]; then
	echo -e "error: unable to locate the gcc"
	exit 1
fi

# Check best compilation flags for compiller
export CC=gcc
export CFLAGS="-march=native -mtune=native -O2 -fomit-frame-pointer"
export CPPFLAGS="-DZEPHIR_PARSER_RELEASE"

# Set defaults
PHPIZE_BIN=$(command -v phpize 2>/dev/null)
PHPCONFIG_BIN=$(command -v php-config 2>/dev/null)

# Translate long options to short
for arg in "$@"; do
  shift
  case "$arg" in
    "--phpize") set -- "$@" "-i" ;;
    "--php-config") set -- "$@" "-c" ;;
    *) set -- "$@" "$arg"
  esac
done

# Options switcher
while getopts i:c: opts; do
   case ${opts} in
      i) PHPIZE_BIN=${OPTARG} ;;
      c) PHPCONFIG_BIN=${OPTARG} ;;
   esac
done

PHP_FULL_VERSION=`${PHPCONFIG_BIN} --version`

if [ $? != 0 ]; then
	echo "php-config is not installed"
	exit 1
fi

if [ "${PHP_FULL_VERSION:0:3}" == "5.3" ]; then
	echo "php 5.3 is no longer supported"
	exit 1
fi

# Detect possible flags
echo "int main() {}" > t.c
gcc ${CFLAGS} t.c -o t 2> t.t
if [ $? != 0 ]; then
	chmod +x gcccpuopt
	BFLAGS=`./gcccpuopt`
	export CFLAGS="-O2 -fomit-frame-pointer $BFLAGS"
	gcc ${CFLAGS} t.c -o t 2> t.t
	if [ $? != 0 ]; then
		export CFLAGS="-O2"
	fi
fi

if [ $(gcc -dumpversion | cut -f1 -d.) -ge 4 ]; then
	gcc ${CFLAGS} -fvisibility=hidden t.c -o t 2> t.t
	export CFLAGS="$CFLAGS -fvisibility=hidden"
fi

rm -f t.t t.c t

cd ${CURRENT_DIR}/parser

rm -f *.o *.lo

${RE2C_BIN} -o scanner.c scanner.re

# Compile lemon
if [ ! -f lemon ]; then
	${CC} lemon.c -o lemon
fi

echo -e "Generating PHP 5 parser..."
./lemon -s parser.php5.lemon
if [ ! -f parser.php5.c ]; then
	echo "error: couldn't generate parser"
	exit 2
fi
echo

./lemon -s parser.php7.lemon
if [ ! -f parser.php7.c ]; then
	echo "error: couldn't generate parser"
	exit 2
fi
echo

echo "#include <php.h>" > parser.c
echo "#if PHP_VERSION_ID < 70000" >> parser.c
cat parser.php5.c >> parser.c
echo "#else" >> parser.c
cat parser.php7.c >> parser.c
echo "#endif" >> parser.c
cat base.c >> parser.c

sed s/"\#line"/"\/\/"/g scanner.c > xx && mv -f xx scanner.c
sed s/"#line"/"\/\/"/g parser.c > xx && mv -f xx parser.c

cd ${CURRENT_DIR}

# Clean current compilation
if [ -f Makefile ]; then
	make clean
	${PHPIZE_BIN} --clean
fi

# Perform the compilation
${PHPIZE_BIN}
./configure --silent --with-php-config=${PHPCONFIG_BIN} --enable-zephir_parser
make -s  -j"$(getconf _NPROCESSORS_ONLN)"
make test

echo

make -s install

echo

# Clean current compilation
if [ -f Makefile ]; then
	make -s clean
	${PHPIZE_BIN} --clean
fi


cd ${CURRENT_DIR}/parser

rm -f *.o *.lo

echo -e "\nThanks for compiling Zephir Parser!\nBuild succeed: Please restart your web server to complete the installation\n"

